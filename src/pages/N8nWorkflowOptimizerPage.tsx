import React, { useState, useRef, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { 
  Upload, 
  Download, 
  AlertTriangle, 
  CheckCircle, 
  Info, 
  Zap, 
  Settings, 
  Eye,
  FileText,
  BarChart3,
  Lightbulb,
  Shield,
  Clock,
  Activity,
  ArrowRight,
  Circle
} from 'lucide-react';

interface WorkflowNode {
  id: string;
  name?: string;
  type: string;
  position?: [number, number];
  parameters?: any;
}

interface WorkflowConnections {
  [nodeId: string]: {
    [outputName: string]: Array<{
      node: string;
      type: string;
      index: number;
    }>;
  };
}

interface Workflow {
  nodes: WorkflowNode[];
  connections: WorkflowConnections;
  meta?: any;
}

interface Issue {
  severity: 'critical' | 'warning' | 'info';
  title: string;
  description: string;
  solution: string;
  nodeId?: string;
}

interface Recommendation {
  title: string;
  description: string;
  importance: 'high' | 'medium' | 'low';
}

interface Optimization {
  title: string;
  description: string;
  benefit: string;
  implementation: string;
}

interface Analysis {
  nodeCount: number;
  nodeTypes: Record<string, number>;
  hasErrorHandling: boolean;
  complexityScore: number;
  overallScore: number;
  issues: Issue[];
  recommendations: Recommendation[];
  optimizations: Optimization[];
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ workflow
const WorkflowVisualization: React.FC<{ workflow: Workflow }> = ({ workflow }) => {
  const [selectedNode, setSelectedNode] = useState<string | null>(null);
  const nodes = workflow.nodes || [];
  const connections = workflow.connections || {};

  const getNodeColor = (nodeType: string) => {
    const colors = {
      'Webhook': '#3b82f6', // blue-500
      'HTTP Request': '#10b981', // green-500
      'IF': '#f59e0b', // yellow-500
      'Function': '#8b5cf6', // purple-500
      'Set': '#6b7280', // gray-500
      'Error': '#ef4444', // red-500
      'Telegram': '#06b6d4', // cyan-500
      'Email': '#6366f1', // indigo-500
      'NoOperation': '#9ca3af', // gray-400
      'Wait': '#f97316', // orange-500
      'Switch': '#ec4899' // pink-500
    };
    return colors[nodeType as keyof typeof colors] || '#6b7280';
  };

  const getNodeIcon = (nodeType: string) => {
    switch (nodeType) {
      case 'Webhook': return 'üîó';
      case 'HTTP Request': return 'üåê';
      case 'IF': return '‚ùì';
      case 'Function': return '‚öôÔ∏è';
      case 'Set': return 'üìù';
      case 'Error': return '‚ùå';
      case 'Telegram': return 'üì±';
      case 'Email': return 'üìß';
      case 'Wait': return '‚è∞';
      case 'Switch': return 'üîÄ';
      case 'NoOperation': return '‚≠ï';
      default: return '‚ö°';
    }
  };

  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–∑–ª–æ–≤
  const arrangeNodes = () => {
    if (nodes.length === 0) return [];

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª (Webhook, Trigger –∏ —Ç.–¥.)
    const startNodes = nodes.filter(node => 
      node.type === 'Webhook' || 
      node.type.includes('Trigger') ||
      !Object.values(connections).some(outputs => 
        Object.values(outputs).some(targets => 
          targets.some(target => target.node === node.id)
        )
      )
    );

    const arranged: Array<WorkflowNode & { x: number; y: number; level: number }> = [];
    const visited = new Set<string>();
    const levels: Record<number, number> = {};

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —É–∑–ª–∞ –∏ –µ–≥–æ –ø–æ—Ç–æ–º–∫–æ–≤
    const placeNode = (nodeId: string, level: number = 0, parentX: number = 0) => {
      if (visited.has(nodeId)) return;
      
      const node = nodes.find(n => n.id === nodeId);
      if (!node) return;

      visited.add(nodeId);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ
      levels[level] = (levels[level] || 0) + 1;
      const positionInLevel = levels[level] - 1;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
      const x = level * 250 + 150;
      const y = positionInLevel * 120 + 100;
      
      arranged.push({
        ...node,
        x,
        y,
        level
      });

      // –†–∞–∑–º–µ—â–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
      const nodeConnections = connections[nodeId];
      if (nodeConnections) {
        Object.values(nodeConnections).forEach(outputs => {
          outputs.forEach(target => {
            placeNode(target.node, level + 1, x);
          });
        });
      }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —É–∑–ª–æ–≤
    if (startNodes.length > 0) {
      startNodes.forEach((startNode, index) => {
        levels[0] = index;
        placeNode(startNode.id, 0);
      });
    } else {
      // –ï—Å–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —É–∑–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–∑–º–µ—â–∞–µ–º –≤—Å–µ —É–∑–ª—ã
      nodes.forEach((node, index) => {
        if (!visited.has(node.id)) {
          const row = Math.floor(index / 3);
          const col = index % 3;
          arranged.push({
            ...node,
            x: col * 200 + 150,
            y: row * 120 + 100,
            level: 0
          });
        }
      });
    }

    return arranged;
  };

  const arrangedNodes = arrangeNodes();

  // –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ª–∏–Ω–∏–π
  const getConnections = () => {
    const lines: Array<{ 
      from: { x: number; y: number }; 
      to: { x: number; y: number };
      type: string;
    }> = [];
    
    Object.entries(connections).forEach(([sourceId, outputs]) => {
      const sourceNode = arrangedNodes.find(n => n.id === sourceId);
      if (!sourceNode) return;

      Object.entries(outputs).forEach(([outputType, targets]) => {
        targets.forEach(target => {
          const targetNode = arrangedNodes.find(n => n.id === target.node);
          if (targetNode) {
            lines.push({
              from: { x: sourceNode.x + 80, y: sourceNode.y },
              to: { x: targetNode.x - 80, y: targetNode.y },
              type: outputType
            });
          }
        });
      });
    });

    return lines;
  };

  const connectionLines = getConnections();

  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã SVG –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —É–∑–ª–æ–≤
  const getSvgDimensions = () => {
    if (arrangedNodes.length === 0) return { width: 800, height: 400 };
    
    const maxX = Math.max(...arrangedNodes.map(n => n.x)) + 200;
    const maxY = Math.max(...arrangedNodes.map(n => n.y)) + 100;
    
    return {
      width: Math.max(800, maxX),
      height: Math.max(400, maxY)
    };
  };

  const { width: svgWidth, height: svgHeight } = getSvgDimensions();

  if (nodes.length === 0) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-8 text-center">
        <div className="text-gray-500 dark:text-gray-400">
          <Settings className="h-16 w-16 mx-auto mb-4 opacity-50" />
          <p className="text-lg">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</p>
          <p className="text-sm mt-2">–ó–∞–≥—Ä—É–∑–∏—Ç–µ workflow –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-gray-50 dark:bg-gray-700 px-6 py-4 border-b border-gray-200 dark:border-gray-600">
        <h4 className="font-semibold flex items-center gap-2">
          <Eye className="h-5 w-5" />
          –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
          <span className="text-sm font-normal text-gray-500 dark:text-gray-400">
            ({nodes.length} —É–∑–ª–æ–≤, {connectionLines.length} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
          </span>
        </h4>
      </div>

      {/* –û–±–ª–∞—Å—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ */}
      <div className="p-6">
        <div className="overflow-auto border border-gray-200 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-900">
          <div className="relative" style={{ width: `${svgWidth}px`, height: `${svgHeight}px`, minHeight: '400px' }}>
            {/* SVG –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π */}
            <svg 
              className="absolute inset-0 w-full h-full pointer-events-none" 
              style={{ zIndex: 1 }}
              viewBox={`0 0 ${svgWidth} ${svgHeight}`}
              preserveAspectRatio="xMidYMid meet"
            >
              <defs>
                <marker
                  id="arrowhead"
                  markerWidth="10"
                  markerHeight="7"
                  refX="9"
                  refY="3.5"
                  orient="auto"
                  markerUnits="strokeWidth"
                >
                  <polygon
                    points="0 0, 10 3.5, 0 7"
                    fill="#6b7280"
                  />
                </marker>
                <marker
                  id="arrowhead-success"
                  markerWidth="10"
                  markerHeight="7"
                  refX="9"
                  refY="3.5"
                  orient="auto"
                  markerUnits="strokeWidth"
                >
                  <polygon
                    points="0 0, 10 3.5, 0 7"
                    fill="#10b981"
                  />
                </marker>
                <marker
                  id="arrowhead-error"
                  markerWidth="10"
                  markerHeight="7"
                  refX="9"
                  refY="3.5"
                  orient="auto"
                  markerUnits="strokeWidth"
                >
                  <polygon
                    points="0 0, 10 3.5, 0 7"
                    fill="#ef4444"
                  />
                </marker>
              </defs>

              {/* –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π */}
              {connectionLines.map((line, index) => {
                const isSuccess = line.type === 'true' || line.type === 'success';
                const isError = line.type === 'false' || line.type === 'error';
                const strokeColor = isSuccess ? '#10b981' : isError ? '#ef4444' : '#6b7280';
                const markerId = isSuccess ? 'arrowhead-success' : isError ? 'arrowhead-error' : 'arrowhead';
                
                return (
                  <g key={index}>
                    <path
                      d={`M ${line.from.x} ${line.from.y} Q ${(line.from.x + line.to.x) / 2} ${line.from.y} ${line.to.x} ${line.to.y}`}
                      stroke={strokeColor}
                      strokeWidth="2"
                      fill="none"
                      markerEnd={`url(#${markerId})`}
                      className="transition-all duration-200 hover:stroke-width-3"
                    />
                    {/* –ü–æ–¥–ø–∏—Å—å —Ç–∏–ø–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
                    {(isSuccess || isError) && (
                      <text
                        x={(line.from.x + line.to.x) / 2}
                        y={(line.from.y + line.to.y) / 2 - 10}
                        textAnchor="middle"
                        className="text-xs fill-current"
                        fill={strokeColor}
                      >
                        {isSuccess ? 'true' : 'false'}
                      </text>
                    )}
                  </g>
                );
              })}
            </svg>

            {/* –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É–∑–ª–æ–≤ */}
            {arrangedNodes.map((node) => (
              <div
                key={node.id}
                className="absolute transform -translate-x-1/2 -translate-y-1/2 cursor-pointer transition-all duration-200 hover:scale-105"
                style={{ 
                  left: `${node.x}px`, 
                  top: `${node.y}px`,
                  zIndex: selectedNode === node.id ? 10 : 2
                }}
                onClick={() => setSelectedNode(selectedNode === node.id ? null : node.id)}
              >
                <div 
                  className={`rounded-lg p-4 shadow-lg min-w-[160px] text-center text-white transition-all duration-200 ${
                    selectedNode === node.id ? 'ring-4 ring-blue-300 shadow-xl' : 'hover:shadow-xl'
                  }`}
                  style={{ backgroundColor: getNodeColor(node.type) }}
                >
                  <div className="text-2xl mb-2">{getNodeIcon(node.type)}</div>
                  <div className="font-medium text-sm leading-tight">
                    {node.name || node.type}
                  </div>
                  <div className="text-xs opacity-75 mt-1">{node.type}</div>
                  {selectedNode === node.id && (
                    <div className="text-xs mt-2 bg-black bg-opacity-20 rounded px-2 py-1">
                      ID: {node.id}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É–∑–ª–µ */}
        {selectedNode && (
          <div className="mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
            <h5 className="font-semibold mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–∑–ª–µ</h5>
            {(() => {
              const node = nodes.find(n => n.id === selectedNode);
              if (!node) return null;
              
              return (
                <div className="grid md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {node.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                  </div>
                  <div>
                    <strong>–¢–∏–ø:</strong> {node.type}
                  </div>
                  <div>
                    <strong>ID:</strong> {node.id}
                  </div>
                  <div>
                    <strong>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</strong> {node.parameters ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}
                  </div>
                </div>
              );
            })()}
          </div>
        )}

        {/* –õ–µ–≥–µ–Ω–¥–∞ */}
        <div className="mt-6 grid md:grid-cols-2 gap-6">
          <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-sm">–¢–∏–ø—ã —É–∑–ª–æ–≤:</h5>
            <div className="grid grid-cols-2 gap-2 text-xs">
              {Object.entries({
                'Webhook': 'üîó –¢—Ä–∏–≥–≥–µ—Ä—ã',
                'HTTP Request': 'üåê HTTP –∑–∞–ø—Ä–æ—Å—ã', 
                'IF': '‚ùì –£—Å–ª–æ–≤–∏—è',
                'Function': '‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞',
                'Error': '‚ùå –û—à–∏–±–∫–∏',
                'Set': 'üìù –î–∞–Ω–Ω—ã–µ'
              }).map(([type, label]) => (
                <div key={type} className="flex items-center gap-2">
                  <div 
                    className="w-3 h-3 rounded"
                    style={{ backgroundColor: getNodeColor(type) }}
                  ></div>
                  <span>{label}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-sm">–¢–∏–ø—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:</h5>
            <div className="space-y-2 text-xs">
              <div className="flex items-center gap-2">
                <div className="w-4 h-0.5 bg-gray-500"></div>
                <span>–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-0.5 bg-green-500"></div>
                <span>–£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (true)</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-0.5 bg-red-500"></div>
                <span>–û—à–∏–±–∫–∞/—É—Å–ª–æ–≤–∏–µ (false)</span>
              </div>
            </div>
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="mt-6 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 p-4 rounded-lg">
          <h5 className="font-semibold mb-3 text-sm">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ workflow:</h5>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div className="text-center">
              <div className="text-lg font-bold text-blue-600 dark:text-blue-400">{nodes.length}</div>
              <div className="text-gray-600 dark:text-gray-400">–£–∑–ª–æ–≤</div>
            </div>
            <div className="text-center">
              <div className="text-lg font-bold text-green-600 dark:text-green-400">{connectionLines.length}</div>
              <div className="text-gray-600 dark:text-gray-400">–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π</div>
            </div>
            <div className="text-center">
              <div className="text-lg font-bold text-purple-600 dark:text-purple-400">
                {Math.max(...arrangedNodes.map(n => n.level || 0)) + 1}
              </div>
              <div className="text-gray-600 dark:text-gray-400">–£—Ä–æ–≤–Ω–µ–π</div>
            </div>
            <div className="text-center">
              <div className="text-lg font-bold text-orange-600 dark:text-orange-400">
                {new Set(nodes.map(n => n.type)).size}
              </div>
              <div className="text-gray-600 dark:text-gray-400">–¢–∏–ø–æ–≤ —É–∑–ª–æ–≤</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

const N8nWorkflowOptimizerPage: React.FC = () => {
  const [workflowData, setWorkflowData] = useState<Workflow | null>(null);
  const [optimizedWorkflowData, setOptimizedWorkflowData] = useState<Workflow | null>(null);
  const [analysis, setAnalysis] = useState<Analysis | null>(null);
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [activeTab, setActiveTab] = useState('overview');
  const [isDragging, setIsDragging] = useState(false);
  
  const fileInputRef = useRef<HTMLInputElement>(null);
  const uploadAreaRef = useRef<HTMLDivElement>(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ drag & drop
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    const file = e.dataTransfer.files[0];
    if (file && file.type === 'application/json') {
      processWorkflowFile(file);
    } else {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ n8n.');
    }
  };

  const handleFileSelect = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const file = e.target.files[0];
      processWorkflowFile(file);
    }
  };

  const processWorkflowFile = (file: File) => {
    const reader = new FileReader();
    reader.onload = (event) => {
      try {
        const workflow = JSON.parse(event.target?.result as string);
        setWorkflowData(workflow);
        startAnalysis(workflow);
      } catch (error) {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª JSON. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ n8n.');
        console.error('JSON parsing error:', error);
      }
    };
    reader.readAsText(file);
  };

  const startAnalysis = async (workflow: Workflow) => {
    setLoading(true);
    setProgress(0);

    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
    const analysisSteps = [10, 25, 40, 60, 75, 90, 100];
    
    for (let i = 0; i < analysisSteps.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 400));
      setProgress(analysisSteps[i]);
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    const analysisResult = analyzeWorkflow(workflow);
    setAnalysis(analysisResult);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ—Ä–∫—Ñ–ª–æ—É
    const optimized = generateOptimizedWorkflow(workflow, analysisResult);
    setOptimizedWorkflowData(optimized);

    setLoading(false);
  };

  const analyzeWorkflow = (workflow: Workflow): Analysis => {
    const nodes = workflow.nodes || [];
    const connections = workflow.connections || {};

    // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const nodeCount = nodes.length;
    const nodeTypes = countNodeTypes(nodes);
    const hasErrorHandling = checkErrorHandling(nodes, connections);
    const complexityScore = calculateComplexity(nodes, connections);
    const overallScore = calculateOverallScore(nodeCount, hasErrorHandling, complexityScore);

    // –í—ã—è–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    const issues = findIssues(workflow);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = generateRecommendations(workflow, issues);

    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const optimizations = generateOptimizations(workflow);

    return {
      nodeCount,
      nodeTypes,
      hasErrorHandling,
      complexityScore,
      overallScore,
      issues,
      recommendations,
      optimizations
    };
  };

  const countNodeTypes = (nodes: WorkflowNode[]): Record<string, number> => {
    const types: Record<string, number> = {};
    nodes.forEach(node => {
      const type = node.type;
      types[type] = (types[type] || 0) + 1;
    });
    return types;
  };

  const checkErrorHandling = (nodes: WorkflowNode[], connections: WorkflowConnections): boolean => {
    const errorHandlerNodes = nodes.filter(node => 
      node.type === 'Error' || 
      (node.parameters && node.parameters.errorHandling)
    );
    return errorHandlerNodes.length > 0;
  };

  const calculateComplexity = (nodes: WorkflowNode[], connections: WorkflowConnections): number => {
    let complexity = nodes.length;

    // –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    let connectionCount = 0;
    Object.values(connections).forEach(nodeConnections => {
      Object.values(nodeConnections).forEach(outputs => {
        connectionCount += outputs.length;
      });
    });
    complexity += connectionCount * 0.5;

    // –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Å–ª–æ–≤–Ω—ã—Ö —É–∑–ª–æ–≤
    const conditionalNodes = nodes.filter(node => 
      node.type === 'IF' || 
      node.type === 'Switch' || 
      node.type === 'SplitInBatches'
    );
    complexity += conditionalNodes.length * 3;

    return Math.round(complexity);
  };

  const calculateOverallScore = (nodeCount: number, hasErrorHandling: boolean, complexityScore: number): number => {
    let score = 70;

    if (nodeCount > 30) {
      score -= 10;
    } else if (nodeCount > 20) {
      score -= 5;
    }

    if (hasErrorHandling) {
      score += 15;
    }

    if (complexityScore > 50) {
      score -= 20;
    } else if (complexityScore > 30) {
      score -= 10;
    }

    return Math.max(0, Math.min(100, score));
  };

  const findIssues = (workflow: Workflow): Issue[] => {
    const nodes = workflow.nodes || [];
    const connections = workflow.connections || {};
    const issues: Issue[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    if (!checkErrorHandling(nodes, connections)) {
      issues.push({
        severity: 'warning',
        title: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫',
        description: '–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–±–æ—è–º –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.',
        solution: '–î–æ–±–∞–≤—å—Ç–µ —É–∑–ª—ã Error Trigger –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤.'
      });
    }

    // –ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —É–∑–ª–æ–≤
    nodes.forEach(node => {
      if (node.type !== 'Set') {
        const hasOutgoingConnections = connections[node.id] && 
          Object.values(connections[node.id]).some(outputs => outputs.length > 0);
        
        if (!hasOutgoingConnections && !isEndNode(node)) {
          issues.push({
            severity: 'warning',
            title: `–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —É–∑–µ–ª: ${node.name || node.type}`,
            description: `–£–∑–µ–ª "${node.name || node.type}" –Ω–µ –∏–º–µ–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º.`,
            solution: '–°–æ–µ–¥–∏–Ω–∏—Ç–µ —É–∑–µ–ª —Å –æ—Å—Ç–∞–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω.',
            nodeId: node.id
          });
        }
      }
    });

    // –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
    nodes.forEach(node => {
      if (isSlowNode(node)) {
        issues.push({
          severity: 'warning',
          title: `–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã–π —É–∑–µ–ª: ${node.name || node.type}`,
          description: `–£–∑–µ–ª "${node.name || node.type}" –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª—è—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.`,
          solution: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É–∑–ª–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.',
          nodeId: node.id
        });
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    issues.push({
      severity: 'critical',
      title: 'HTTP-–∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫',
      description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã HTTP-–∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ —Å–µ—Ç–∏.',
      solution: '–î–æ–±–∞–≤—å—Ç–µ —É–∑–ª—ã IF –ø–æ—Å–ª–µ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.'
    });

    return issues;
  };

  const isEndNode = (node: WorkflowNode): boolean => {
    const endNodeTypes = ['Respond to Webhook', 'NoOp', 'Stop', 'Wait', 'Telegram', 'Slack', 'Email', 'Discord'];
    return endNodeTypes.includes(node.type);
  };

  const isSlowNode = (node: WorkflowNode): boolean => {
    const slowNodeTypes = ['HTTP Request', 'Execute Command', 'SFTP', 'SSH', 'Wait', 'GoogleSheets'];
    return slowNodeTypes.includes(node.type);
  };

  const generateRecommendations = (workflow: Workflow, issues: Issue[]): Recommendation[] => {
    const recommendations: Recommendation[] = [];

    recommendations.push({
      title: '–î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫',
      description: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.',
      importance: 'high'
    });

    recommendations.push({
      title: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
      description: '–î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.',
      importance: 'medium'
    });

    recommendations.push({
      title: '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã',
      description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.',
      importance: 'medium'
    });

    return recommendations;
  };

  const generateOptimizations = (workflow: Workflow): Optimization[] => {
    const optimizations: Optimization[] = [];

    optimizations.push({
      title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤',
      description: '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.',
      benefit: '–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API.',
      implementation: '1. –ù–∞–π–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã –∫ –æ–¥–Ω–æ–º—É API.\n2. –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –∏—Ö –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º batch API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ.\n3. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–∞–∫–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é SplitInBatches.'
    });

    optimizations.push({
      title: '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
      description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
      benefit: '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã.',
      implementation: '1. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞.\n2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Set node –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π workflow.\n3. –î–æ–±–∞–≤—å—Ç–µ —É—Å–ª–æ–≤–Ω–æ–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.'
    });

    return optimizations;
  };

  const generateOptimizedWorkflow = (workflow: Workflow, analysis: Analysis): Workflow => {
    const optimizedWorkflow = JSON.parse(JSON.stringify(workflow));

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if (!analysis.hasErrorHandling && optimizedWorkflow.nodes) {
      optimizedWorkflow.nodes.push({
        id: "error-handler-" + Date.now(),
        name: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫",
        type: "Error",
        position: [800, 300],
        parameters: {
          errorHandling: "continueErrorOutput"
        }
      });
    }

    // –ò–∑–º–µ–Ω—è–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–ª–∏—á–∏—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    if (optimizedWorkflow.meta) {
      optimizedWorkflow.meta.optimized = true;
      optimizedWorkflow.meta.optimizedTime = new Date().toISOString();
    } else {
      optimizedWorkflow.meta = {
        optimized: true,
        optimizedTime: new Date().toISOString()
      };
    }

    return optimizedWorkflow;
  };

  const downloadOptimizedWorkflow = () => {
    if (optimizedWorkflowData) {
      const blob = new Blob([JSON.stringify(optimizedWorkflowData, null, 2)], {
        type: 'application/json'
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'optimized-n8n-workflow.json';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  };

  const loadSampleWorkflow = () => {
    const sampleWorkflow: Workflow = {
      nodes: [
        {
          id: "start",
          name: "Webhook",
          type: "Webhook",
          position: [100, 200]
        },
        {
          id: "http1",
          name: "Get Data",
          type: "HTTP Request",
          position: [300, 200]
        },
        {
          id: "if1",
          name: "Check Status",
          type: "IF",
          position: [500, 200]
        },
        {
          id: "process1",
          name: "Process Data",
          type: "Function",
          position: [700, 150]
        },
        {
          id: "error1",
          name: "Handle Error",
          type: "NoOperation",
          position: [700, 250]
        },
        {
          id: "telegram1",
          name: "Send Notification",
          type: "Telegram",
          position: [900, 150]
        }
      ],
      connections: {
        start: {
          main: [{ node: "http1", type: "main", index: 0 }]
        },
        http1: {
          main: [{ node: "if1", type: "main", index: 0 }]
        },
        if1: {
          true: [{ node: "process1", type: "main", index: 0 }],
          false: [{ node: "error1", type: "main", index: 0 }]
        },
        process1: {
          main: [{ node: "telegram1", type: "main", index: 0 }]
        }
      },
      meta: {
        instanceId: "test123",
        lastUpdated: "2023-01-15T12:00:00.000Z"
      }
    };

    setWorkflowData(sampleWorkflow);
    startAnalysis(sampleWorkflow);
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600 dark:text-green-400';
    if (score >= 60) return 'text-yellow-600 dark:text-yellow-400';
    return 'text-red-600 dark:text-red-400';
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'border-red-500 bg-red-50 dark:bg-red-900/20';
      case 'warning': return 'border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20';
      case 'info': return 'border-blue-500 bg-blue-50 dark:bg-blue-900/20';
      default: return 'border-gray-500 bg-gray-50 dark:bg-gray-900/20';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <AlertTriangle className="h-5 w-5 text-red-500" />;
      case 'warning': return <AlertTriangle className="h-5 w-5 text-yellow-500" />;
      case 'info': return <Info className="h-5 w-5 text-blue-500" />;
      default: return <Info className="h-5 w-5 text-gray-500" />;
    }
  };

  return (
    <>
      <Helmet>
        <title>n8n Workflow Debugger & Optimizer ‚Äî –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</title>
        <meta name="description" content="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –æ—Ç–ª–∞–¥–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ n8n. –ü–æ–≤—ã—Å—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π." />
        <meta name="keywords" content="n8n workflow optimizer, n8n debugger, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è workflow" />
      </Helmet>

      <div className="container mx-auto px-4 py-8 md:py-12 max-w-7xl">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center mb-6">
            <Settings className="h-12 w-12 text-primary-600 dark:text-primary-400 mr-4" />
            <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-primary-600 to-secondary-500 bg-clip-text text-transparent">
              n8n Workflow Debugger & Optimizer
            </h1>
          </div>
          <p className="text-lg text-gray-700 dark:text-gray-300 leading-relaxed max-w-4xl mx-auto">
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, –æ—Ç–ª–∞–∂–∏–≤–∞–π—Ç–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã n8n –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
          </p>
        </div>

        {/* Upload Section */}
        {!workflowData && (
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 mb-8">
            <h2 className="text-2xl font-bold mb-6">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å n8n</h2>
            <p className="text-gray-600 dark:text-gray-300 mb-6">
              –ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ n8n –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞—à –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç:
            </p>
            <ul className="list-disc list-inside text-gray-600 dark:text-gray-300 mb-8 space-y-2">
              <li>–í—ã—è–≤–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ "–±—É—Ç—ã–ª–æ—á–Ω—ã–µ –≥–æ—Ä–ª—ã—à–∫–∏"</li>
              <li>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</li>
              <li>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞</li>
              <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</li>
            </ul>

            <div
              ref={uploadAreaRef}
              onDragOver={handleDragOver}
              onDragLeave={handleDragLeave}
              onDrop={handleDrop}
              className={`border-2 border-dashed rounded-xl p-8 text-center transition-colors duration-200 cursor-pointer ${
                isDragging
                  ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                  : 'border-gray-300 dark:border-gray-600 hover:border-primary-400 hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
              onClick={handleFileSelect}
            >
              <Upload className="h-16 w-16 text-primary-600 dark:text-primary-400 mx-auto mb-4" />
              <div className="text-xl font-medium mb-2">
                –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ JSON —Ñ–∞–π–ª —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ n8n —Å—é–¥–∞
              </div>
              <div className="text-gray-500 dark:text-gray-400 mb-4">–∏–ª–∏</div>
              <button className="bg-primary-600 hover:bg-primary-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200">
                –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
              </button>
              <input
                ref={fileInputRef}
                type="file"
                accept=".json"
                onChange={handleFileChange}
                className="hidden"
              />
            </div>

            <div className="mt-6 text-center">
              <button
                onClick={loadSampleWorkflow}
                className="bg-secondary-600 hover:bg-secondary-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200"
              >
                –î–µ–º–æ: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä workflow
              </button>
            </div>
          </div>
        )}

        {/* Loading */}
        {loading && (
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 mb-8 text-center">
            <div className="animate-spin rounded-full h-16 w-16 border-4 border-primary-200 border-t-primary-600 mx-auto mb-4"></div>
            <p className="text-lg font-medium mb-4">–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...</p>
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-4">
              <div
                className="bg-primary-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            <p className="text-sm text-gray-500 dark:text-gray-400">{progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</p>
          </div>
        )}

        {/* Analysis Results */}
        {analysis && !loading && (
          <div className="space-y-8">
            {/* Tabs */}
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden">
              <div className="flex border-b border-gray-200 dark:border-gray-700 overflow-x-auto">
                {[
                  { id: 'overview', label: '–û–±–∑–æ—Ä', icon: BarChart3 },
                  { id: 'issues', label: '–ü—Ä–æ–±–ª–µ–º—ã', icon: AlertTriangle },
                  { id: 'optimization', label: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', icon: Zap },
                  { id: 'visualization', label: '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è', icon: Eye }
                ].map(tab => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`flex items-center gap-2 px-6 py-4 font-medium transition-colors duration-200 whitespace-nowrap ${
                      activeTab === tab.id
                        ? 'border-b-2 border-primary-600 text-primary-600 dark:text-primary-400'
                        : 'text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400'
                    }`}
                  >
                    <tab.icon className="h-5 w-5" />
                    {tab.label}
                  </button>
                ))}
              </div>

              <div className="p-8">
                {/* Overview Tab */}
                {activeTab === 'overview' && (
                  <div className="space-y-8">
                    <div>
                      <h3 className="text-2xl font-bold mb-6">–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞</h3>
                      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
                        <div className="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <span className="font-medium">–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</span>
                            <Activity className="h-5 w-5 text-gray-500" />
                          </div>
                          <div className={`text-3xl font-bold ${getScoreColor(analysis.overallScore)}`}>
                            {analysis.overallScore}/100
                          </div>
                        </div>

                        <div className="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <span className="font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤</span>
                            <Settings className="h-5 w-5 text-gray-500" />
                          </div>
                          <div className="text-3xl font-bold text-blue-600 dark:text-blue-400">
                            {analysis.nodeCount}
                          </div>
                        </div>

                        <div className="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <span className="font-medium">–°–ª–æ–∂–Ω–æ—Å—Ç—å</span>
                            <BarChart3 className="h-5 w-5 text-gray-500" />
                          </div>
                          <div className={`text-3xl font-bold ${
                            analysis.complexityScore > 50 ? 'text-red-600 dark:text-red-400' :
                            analysis.complexityScore > 30 ? 'text-yellow-600 dark:text-yellow-400' :
                            'text-green-600 dark:text-green-400'
                          }`}>
                            {analysis.complexityScore}
                          </div>
                        </div>

                        <div className="bg-gray-50 dark:bg-gray-700 p-6 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <span className="font-medium">–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</span>
                            <Shield className="h-5 w-5 text-gray-500" />
                          </div>
                          <div className={`text-lg font-bold ${
                            analysis.hasErrorHandling ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'
                          }`}>
                            {analysis.hasErrorHandling ? '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                          </div>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h3 className="text-xl font-bold mb-4">–°–≤–æ–¥–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</h3>
                      <div className="space-y-4">
                        {analysis.recommendations.slice(0, 3).map((rec, index) => (
                          <div key={index} className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border-l-4 border-blue-500">
                            <div className="flex items-center justify-between mb-2">
                              <h4 className="font-semibold">{rec.title}</h4>
                              <span className={`px-2 py-1 rounded text-xs font-medium ${
                                rec.importance === 'high' ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300' :
                                rec.importance === 'medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300' :
                                'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300'
                              }`}>
                                {rec.importance === 'high' ? '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç' :
                                 rec.importance === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç' : '–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç'}
                              </span>
                            </div>
                            <p className="text-gray-600 dark:text-gray-300">{rec.description}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {/* Issues Tab */}
                {activeTab === 'issues' && (
                  <div>
                    <h3 className="text-2xl font-bold mb-6">–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã</h3>
                    {analysis.issues.length === 0 ? (
                      <div className="text-center py-12">
                        <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
                        <p className="text-xl font-medium text-green-600 dark:text-green-400">
                          –ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!
                        </p>
                        <p className="text-gray-600 dark:text-gray-300 mt-2">
                          –í–∞—à —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
                        </p>
                      </div>
                    ) : (
                      <div className="space-y-4">
                        {analysis.issues.map((issue, index) => (
                          <div key={index} className={`p-6 rounded-lg border-l-4 ${getSeverityColor(issue.severity)}`}>
                            <div className="flex items-start justify-between mb-3">
                              <div className="flex items-center gap-2">
                                {getSeverityIcon(issue.severity)}
                                <h4 className="font-semibold text-lg">{issue.title}</h4>
                              </div>
                              <span className={`px-2 py-1 rounded text-xs font-medium ${
                                issue.severity === 'critical' ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300' :
                                issue.severity === 'warning' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300' :
                                'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300'
                              }`}>
                                {issue.severity === 'critical' ? '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è' :
                                 issue.severity === 'warning' ? '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ' : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}
                              </span>
                            </div>
                            <p className="text-gray-700 dark:text-gray-300 mb-4">{issue.description}</p>
                            <div className="bg-white dark:bg-gray-800 p-4 rounded-lg">
                              <h5 className="font-medium mb-2">–†–µ—à–µ–Ω–∏–µ:</h5>
                              <p className="text-gray-600 dark:text-gray-300">{issue.solution}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                )}

                {/* Optimization Tab */}
                {activeTab === 'optimization' && (
                  <div className="space-y-8">
                    <div>
                      <h3 className="text-2xl font-bold mb-6">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</h3>
                      <div className="space-y-6">
                        {analysis.optimizations.map((opt, index) => (
                          <div key={index} className="bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 p-6 rounded-lg">
                            <h4 className="text-xl font-semibold mb-3 flex items-center gap-2">
                              <Lightbulb className="h-6 w-6 text-yellow-500" />
                              {opt.title}
                            </h4>
                            <p className="text-gray-700 dark:text-gray-300 mb-4">{opt.description}</p>
                            <div className="grid md:grid-cols-2 gap-4">
                              <div className="bg-white dark:bg-gray-800 p-4 rounded-lg">
                                <h5 className="font-medium mb-2 text-green-600 dark:text-green-400">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ:</h5>
                                <p className="text-gray-600 dark:text-gray-300">{opt.benefit}</p>
                              </div>
                              <div className="bg-white dark:bg-gray-800 p-4 rounded-lg">
                                <h5 className="font-medium mb-2 text-blue-600 dark:text-blue-400">–†–µ–∞–ª–∏–∑–∞—Ü–∏—è:</h5>
                                <pre className="text-sm text-gray-600 dark:text-gray-300 whitespace-pre-wrap">
                                  {opt.implementation}
                                </pre>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div>
                      <h3 className="text-xl font-bold mb-4">–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</h3>
                      <p className="text-gray-600 dark:text-gray-300 mb-4">
                        –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞. 
                        –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å JSON –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ n8n.
                      </p>
                      <button
                        onClick={downloadOptimizedWorkflow}
                        className="bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 flex items-center gap-2 mb-4"
                      >
                        <Download className="h-5 w-5" />
                        –°–∫–∞—á–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π workflow
                      </button>
                      <div className="bg-gray-900 text-green-400 p-4 rounded-lg overflow-x-auto max-h-96">
                        <pre className="text-sm">
                          {optimizedWorkflowData ? JSON.stringify(optimizedWorkflowData, null, 2) : '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞.'}
                        </pre>
                      </div>
                    </div>
                  </div>
                )}

                {/* Visualization Tab */}
                {activeTab === 'visualization' && workflowData && (
                  <div>
                    <h3 className="text-2xl font-bold mb-6">–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞</h3>
                    <WorkflowVisualization workflow={workflowData} />
                    <div className="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                      <h4 className="font-semibold mb-2">–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:</h4>
                      <p className="text-gray-600 dark:text-gray-300 text-sm">
                        –ù–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ n8n. –£–∑–ª—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ü–≤–µ—Ç–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏, 
                        –∞ —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –†–∞–∑–ª–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ –æ–±–æ–∑–Ω–∞—á–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É–∑–ª–æ–≤. 
                        –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π —É–∑–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Reset Button */}
            <div className="text-center">
              <button
                onClick={() => {
                  setWorkflowData(null);
                  setAnalysis(null);
                  setOptimizedWorkflowData(null);
                  setActiveTab('overview');
                }}
                className="bg-gray-600 hover:bg-gray-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200"
              >
                –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π workflow
              </button>
            </div>
          </div>
        )}

        {/* Features */}
        <div className="grid md:grid-cols-3 gap-8 mt-16">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md text-center">
            <div className="bg-blue-100 dark:bg-blue-900/30 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
              <BarChart3 className="h-8 w-8 text-blue-600 dark:text-blue-400" />
            </div>
            <h3 className="text-xl font-semibold mb-3">–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑</h3>
            <p className="text-gray-600 dark:text-gray-300">
              –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            </p>
          </div>

          <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md text-center">
            <div className="bg-green-100 dark:bg-green-900/30 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
              <Zap className="h-8 w-8 text-green-600 dark:text-green-400" />
            </div>
            <h3 className="text-xl font-semibold mb-3">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</h3>
            <p className="text-gray-600 dark:text-gray-300">
              –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é workflow
            </p>
          </div>

          <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md text-center">
            <div className="bg-purple-100 dark:bg-purple-900/30 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
              <Shield className="h-8 w-8 text-purple-600 dark:text-purple-400" />
            </div>
            <h3 className="text-xl font-semibold mb-3">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</h3>
            <p className="text-gray-600 dark:text-gray-300">
              –ù–∞–≥–ª—è–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã workflow —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
            </p>
          </div>
        </div>
      </div>
    </>
  );
};

export default N8nWorkflowOptimizerPage;