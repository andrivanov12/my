export interface AirtableArticle {
  id: string;
  title: string;
  content: string;
  imageUrl: string;
  author?: string;
  category?: string;
  publishedAt?: string;
  excerpt?: string;
  tags?: string[];
  slug?: string;
}

export interface AirtableRecord {
  id: string;
  fields: {
    Title?: string;
    Content?: string;
    'Image URL'?: string;
    Category?: string;
    Author?: string;
    PublishedAt?: string;
    Excerpt?: string;
    Tags?: string[];
  };
  createdTime: string;
}

// Get configuration from environment variables
const AIRTABLE_API_KEY = import.meta.env.VITE_AIRTABLE_API_KEY;
const AIRTABLE_BASE_ID = import.meta.env.VITE_AIRTABLE_BASE_ID;
const AIRTABLE_TABLE_ID = import.meta.env.VITE_AIRTABLE_TABLE_ID;
const AIRTABLE_VIEW_ID = import.meta.env.VITE_AIRTABLE_VIEW_ID;

class AirtableService {
  private baseUrl: string;
  private isConfigured: boolean;

  constructor() {
    this.baseUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}`;
    this.isConfigured = !!(AIRTABLE_API_KEY && AIRTABLE_BASE_ID && AIRTABLE_TABLE_ID);
    
    if (!this.isConfigured) {
      console.warn('‚ö†Ô∏è Airtable –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—å–∏.');
    }
  }

  async getArticles(): Promise<AirtableArticle[]> {
    if (!this.isConfigured) {
      console.warn('‚ö†Ô∏è Airtable –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.');
      return [];
    }

    try {
      // –°—Ç—Ä–æ–∏–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      let url = this.baseUrl;
      const params = new URLSearchParams();
      
      // –î–æ–±–∞–≤–ª—è–µ–º view –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      if (AIRTABLE_VIEW_ID) {
        params.append('view', AIRTABLE_VIEW_ID);
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      params.append('sort[0][field]', 'PublishedAt');
      params.append('sort[0][direction]', 'desc');
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      params.append('maxRecords', '50');
      
      if (params.toString()) {
        url += '?' + params.toString();
      }
      
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ Airtable...');
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ Airtable API:', {
          status: response.status,
          statusText: response.statusText,
          error: errorText
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
        return [];
      }

      const data = await response.json();
      
      if (!data.records || !Array.isArray(data.records)) {
        console.warn('‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ Airtable');
        return [];
      }

      const articles = data.records
        .filter((record: AirtableRecord) => this.isValidRecord(record))
        .map((record: AirtableRecord) => this.transformRecord(record));

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –∏–∑ Airtable`);
      return articles;
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–µ–π –∏–∑ Airtable:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
      return [];
    }
  }

  async getArticleBySlug(slug: string): Promise<AirtableArticle | null> {
    if (!this.isConfigured) {
      return null;
    }

    try {
      let url = this.baseUrl;
      const params = new URLSearchParams();
      
      if (AIRTABLE_VIEW_ID) {
        params.append('view', AIRTABLE_VIEW_ID);
      }
      
      url += '?' + params.toString();
      
      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ Airtable API: ${response.status} ${response.statusText}`);
        return null;
      }

      const data = await response.json();
      
      if (!data.records || data.records.length === 0) {
        return null;
      }

      // –ò—â–µ–º —Å—Ç–∞—Ç—å—é –ø–æ slug
      const record = data.records.find((r: AirtableRecord) => {
        const recordSlug = this.generateSlug(r.fields.Title || '');
        return recordSlug === slug;
      });

      return record && this.isValidRecord(record) ? this.transformRecord(record) : null;
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—å–∏ –ø–æ slug –∏–∑ Airtable:', error);
      return null;
    }
  }

  private isValidRecord(record: AirtableRecord): boolean {
    const fields = record.fields;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: Title –∏ Content
    const hasTitle = fields.Title && fields.Title.trim().length > 0;
    const hasContent = fields.Content && fields.Content.trim().length > 0;
    
    if (!hasTitle || !hasContent) {
      console.warn('‚ö†Ô∏è –ó–∞–ø–∏—Å—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', {
        id: record.id,
        hasTitle,
        hasContent,
        title: fields.Title?.substring(0, 50) + '...' || '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞'
      });
      return false;
    }
    
    return true;
  }

  private transformRecord(record: AirtableRecord): AirtableArticle {
    const fields = record.fields;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const slug = this.generateSlug(fields.Title || '');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º excerpt –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ
    const excerpt = fields.Excerpt || this.generateExcerpt(fields.Content || '');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let imageUrl = fields['Image URL'] || '';
    
    // –ï—Å–ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    if (!imageUrl || !imageUrl.trim()) {
      const category = fields.Category || '–û–±—â–µ–µ';
      if (category === 'n8n') {
        imageUrl = 'https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg?auto=compress&cs=tinysrgb&w=800&h=400';
      } else if (category === 'AI') {
        imageUrl = 'https://images.pexels.com/photos/8386422/pexels-photo-8386422.jpeg?auto=compress&cs=tinysrgb&w=800&h=400';
      } else {
        imageUrl = 'https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg?auto=compress&cs=tinysrgb&w=800&h=400';
      }
    } else {
      // –û—á–∏—â–∞–µ–º URL –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
      imageUrl = imageUrl.trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–º URL
      try {
        new URL(imageUrl);
      } catch {
        console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ:', imageUrl);
        imageUrl = 'https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg?auto=compress&cs=tinysrgb&w=800&h=400';
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    const category = fields.Category || this.detectCategory(fields.Title || '', fields.Content || '');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const processedContent = this.processContent(fields.Content || '');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
    const tags = fields.Tags || this.extractTags(fields.Title || '', fields.Content || '', category);

    return {
      id: record.id,
      title: fields.Title || '',
      content: processedContent,
      imageUrl,
      author: fields.Author || 'AI Market Hub',
      category,
      publishedAt: fields.PublishedAt || record.createdTime,
      excerpt,
      tags,
      slug,
    };
  }

  private processContent(content: string): string {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML
    let processed = content;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (## -> h3, ### -> h4)
    processed = processed.replace(/^### (.+)$/gm, '<h4>$1</h4>');
    processed = processed.replace(/^## (.+)$/gm, '<h3>$1</h3>');
    processed = processed.replace(/^# (.+)$/gm, '<h2>$1</h2>');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç (**text** -> <strong>text</strong>)
    processed = processed.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å–∏–≤ (*text* -> <em>text</em>)
    processed = processed.replace(/(?<!\*)\*([^*]+?)\*(?!\*)/g, '<em>$1</em>');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ [text](url)
    processed = processed.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
    processed = processed.replace(/^- (.+)$/gm, '<li>$1</li>');
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
    processed = processed.replace(/(<li>.*?<\/li>\s*)+/gs, (match) => {
      return '<ul class="list-disc pl-5 my-4">' + match + '</ul>';
    });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    processed = processed.replace(/\n\n/g, '</p><p>');
    processed = processed.replace(/\n/g, '<br>');
    
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–±–µ—Ä–Ω—É—Ç–æ
    if (!processed.startsWith('<')) {
      processed = '<p>' + processed + '</p>';
    }
    
    // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ —Ç–µ–≥–∏
    processed = processed.replace(/<p><\/p>/g, '');
    processed = processed.replace(/<p>(<h[1-6]>)/g, '$1');
    processed = processed.replace(/(<\/h[1-6]>)<\/p>/g, '$1');
    processed = processed.replace(/<p>(<ul>)/g, '$1');
    processed = processed.replace(/(<\/ul>)<\/p>/g, '$1');
    
    return processed;
  }

  private generateSlug(title: string): string {
    return title
      .toLowerCase()
      .replace(/[^a-z–∞-—è0-9\s-]/g, '') // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      .replace(/\s+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
      .replace(/-+/g, '-') // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
      .replace(/^-|-$/g, '') // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
      .trim();
  }

  private generateExcerpt(content: string, maxLength: number = 200): string {
    // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ markdown
    const cleanContent = content
      .replace(/<[^>]*>/g, '') // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
      .replace(/[#*`]/g, '') // –£–¥–∞–ª—è–µ–º markdown —Å–∏–º–≤–æ–ª—ã
      .replace(/\*\*(.+?)\*\*/g, '$1') // –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
      .replace(/\n+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
      .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      .trim();
    
    if (cleanContent.length <= maxLength) {
      return cleanContent;
    }
    
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –ª–∏–º–∏—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞—Ç—å —Å–ª–æ–≤–∞
    const truncated = cleanContent.substring(0, maxLength);
    const lastSpaceIndex = truncated.lastIndexOf(' ');
    
    if (lastSpaceIndex > maxLength * 0.8) {
      return truncated.substring(0, lastSpaceIndex).trim() + '...';
    }
    
    return truncated.trim() + '...';
  }

  private detectCategory(title: string, content: string): string {
    const text = (title + ' ' + content).toLowerCase();
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if (text.includes('n8n') || text.includes('workflow') || text.includes('–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤') || text.includes('—Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å')) {
      return 'n8n';
    }
    if (text.includes('ai') || text.includes('–∏–∏') || text.includes('–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç') || text.includes('chatgpt') || text.includes('–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å')) {
      return 'AI';
    }
    if (text.includes('–æ–±–∑–æ—Ä') || text.includes('—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ') || text.includes('—Ç–µ—Å—Ç')) {
      return '–û–±–∑–æ—Ä—ã';
    }
    if (text.includes('–æ–±—É—á–µ–Ω–∏–µ') || text.includes('–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ') || text.includes('–∫—É—Ä—Å') || text.includes('–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')) {
      return '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ';
    }
    if (text.includes('no-code') || text.includes('–±–µ–∑ –∫–æ–¥–∞') || text.includes('–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è')) {
      return '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è';
    }
    
    return '–û–±—â–µ–µ';
  }

  private extractTags(title: string, content: string, category: string): string[] {
    const text = (title + ' ' + content).toLowerCase();
    const tags: string[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ —Ç–µ–≥
    if (category && !tags.includes(category)) {
      tags.push(category);
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if (text.includes('n8n')) tags.push('n8n');
    if (text.includes('workflow') || text.includes('—Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å')) tags.push('Workflow');
    if (text.includes('–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è')) tags.push('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è');
    if (text.includes('chatgpt')) tags.push('ChatGPT');
    if (text.includes('ai') || text.includes('–∏–∏')) tags.push('AI');
    if (text.includes('–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç')) tags.push('–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç');
    if (text.includes('–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å')) tags.push('–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏');
    if (text.includes('–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è')) tags.push('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è');
    if (text.includes('api')) tags.push('API');
    if (text.includes('no-code') || text.includes('–±–µ–∑ –∫–æ–¥–∞')) tags.push('NoCode');
    if (text.includes('low-code')) tags.push('LowCode');
    if (text.includes('tutorial') || text.includes('—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ')) tags.push('–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ');
    if (text.includes('–±–∏–∑–Ω–µ—Å')) tags.push('–ë–∏–∑–Ω–µ—Å');
    if (text.includes('–º–∞—Ä–∫–µ—Ç–∏–Ω–≥')) tags.push('–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥');
    if (text.includes('–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')) tags.push('–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤
    return Array.from(new Set(tags)).slice(0, 5);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async testConnection(): Promise<boolean> {
    if (!this.isConfigured) {
      console.log('‚ùå Airtable –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return false;
    }

    try {
      console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Airtable...');
      
      const response = await fetch(`${this.baseUrl}?maxRecords=1`, {
        headers: {
          'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
          'Content-Type': 'application/json',
        },
      });

      const success = response.ok;
      
      if (success) {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Airtable —É—Å–ø–µ—à–Ω–æ');
        const data = await response.json();
        console.log('üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
          recordsCount: data.records?.length || 0,
          hasRecords: !!data.records
        });
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Airtable:', {
          status: response.status,
          statusText: response.statusText
        });
      }
      
      return success;
    } catch (error) {
      console.error('‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Airtable –Ω–µ —É–¥–∞–ª—Å—è:', error);
      return false;
    }
  }

  // Getter to check if service is properly configured
  get configured(): boolean {
    return this.isConfigured;
  }
}

export const airtableService = new AirtableService();