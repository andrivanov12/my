export interface AirtableArticle {
  id: string;
  title: string;
  content: string;
  imageUrl: string;
  author?: string;
  category?: string;
  publishedAt?: string;
  excerpt?: string;
  tags?: string[];
  slug?: string;
}

export interface AirtableRecord {
  id: string;
  fields: {
    Title?: string;
    Content?: string;
    'Image URL'?: string;
  };
  createdTime: string;
}

// Get configuration from environment variables
const AIRTABLE_API_KEY = import.meta.env.VITE_AIRTABLE_API_KEY;
const AIRTABLE_BASE_ID = import.meta.env.VITE_AIRTABLE_BASE_ID;
const AIRTABLE_TABLE_ID = import.meta.env.VITE_AIRTABLE_TABLE_ID;
const AIRTABLE_VIEW_ID = import.meta.env.VITE_AIRTABLE_VIEW_ID;

// Fallback mock data for when Airtable is not available
const MOCK_ARTICLES: AirtableArticle[] = [
  {
    id: 'mock-1',
    title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Hub',
    content: `
      <p>–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Airtable –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.</p>
      
      <h3>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Airtable</h3>
      <p>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∞—à–µ–π –±–∞–∑–µ Airtable –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</p>
      <ul>
        <li>–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Airtable</li>
        <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</li>
        <li>–£–∫–∞–∂–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è</li>
        <li>–î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª .env</li>
      </ul>
      
      <p>–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ —Å—Ç–∞—Ç—å–∏ –∏–∑ Airtable.</p>
    `,
    imageUrl: 'https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg?auto=compress&cs=tinysrgb&w=800&h=400',
    author: '–ö–æ–º–∞–Ω–¥–∞ AI Hub',
    category: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞',
    publishedAt: new Date().toISOString(),
    excerpt: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–ª–æ–≥–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Airtable –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö —Å—Ç–∞—Ç–µ–π.',
    tags: ['demo', 'welcome', 'setup'],
    slug: 'welcome-to-ai-hub',
  }
];

class AirtableService {
  private baseUrl: string;
  private isConfigured: boolean;

  constructor() {
    this.baseUrl = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}`;
    this.isConfigured = !!(AIRTABLE_API_KEY && AIRTABLE_BASE_ID && AIRTABLE_TABLE_ID);
    
    if (!this.isConfigured) {
      console.warn('üîß Airtable –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏.');
      console.warn('üìù –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Airtable —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      console.warn('   - VITE_AIRTABLE_API_KEY');
      console.warn('   - VITE_AIRTABLE_BASE_ID');
      console.warn('   - VITE_AIRTABLE_TABLE_ID');
      console.warn('   - VITE_AIRTABLE_VIEW_ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    } else {
      console.info('‚úÖ Airtable –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    }
  }

  async getArticles(): Promise<AirtableArticle[]> {
    // Return mock data if Airtable is not configured
    if (!this.isConfigured) {
      console.info('üìÑ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏');
      return MOCK_ARTICLES;
    }

    try {
      // –°—Ç—Ä–æ–∏–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      let url = this.baseUrl;
      const params = new URLSearchParams();
      
      // –î–æ–±–∞–≤–ª—è–µ–º view –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      if (AIRTABLE_VIEW_ID) {
        params.append('view', AIRTABLE_VIEW_ID);
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      params.append('sort[0][field]', 'Title');
      params.append('sort[0][direction]', 'asc');
      
      if (params.toString()) {
        url += '?' + params.toString();
      }
      
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∏–∑ Airtable:', url);
      
      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ Airtable API:', {
          status: response.status,
          statusText: response.statusText,
          error: errorText
        });
        
        // Return mock data on API error
        console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API');
        return MOCK_ARTICLES;
      }

      const data = await response.json();
      console.log('üìä –û—Ç–≤–µ—Ç –æ—Ç Airtable:', {
        recordsCount: data.records?.length || 0,
        hasRecords: !!data.records
      });
      
      if (!data.records || !Array.isArray(data.records)) {
        console.warn('‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ Airtable, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏');
        return MOCK_ARTICLES;
      }

      const articles = data.records
        .filter((record: AirtableRecord) => this.isValidRecord(record))
        .map((record: AirtableRecord) => this.transformRecord(record));

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –∏–∑ Airtable`);

      // If no valid articles found, return mock data
      if (articles.length === 0) {
        console.warn('‚ö†Ô∏è –í–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Airtable, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏');
        return MOCK_ARTICLES;
      }

      return articles;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–µ–π –∏–∑ Airtable:', error);
      console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
      return MOCK_ARTICLES;
    }
  }

  async getArticleBySlug(slug: string): Promise<AirtableArticle | null> {
    // Check mock data first
    const mockArticle = MOCK_ARTICLES.find(article => article.slug === slug);
    if (mockArticle) {
      return mockArticle;
    }

    if (!this.isConfigured) {
      return null;
    }

    try {
      let url = this.baseUrl;
      const params = new URLSearchParams();
      
      if (AIRTABLE_VIEW_ID) {
        params.append('view', AIRTABLE_VIEW_ID);
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ slug (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏–∑ Title)
      params.append('filterByFormula', `LOWER(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE({Title}, " ", "-"), ".", ""), ",", "")) = "${slug}"`);
      
      url += '?' + params.toString();
      
      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ Airtable API: ${response.status} ${response.statusText}`);
        return null;
      }

      const data = await response.json();
      
      if (!data.records || data.records.length === 0) {
        return null;
      }

      const record = data.records[0];
      return this.isValidRecord(record) ? this.transformRecord(record) : null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—å–∏ –ø–æ slug –∏–∑ Airtable:', error);
      return null;
    }
  }

  private isValidRecord(record: AirtableRecord): boolean {
    const fields = record.fields;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: Title –∏ Content
    const hasTitle = fields.Title && fields.Title.trim().length > 0;
    const hasContent = fields.Content && fields.Content.trim().length > 0;
    
    if (!hasTitle || !hasContent) {
      console.warn('‚ö†Ô∏è –ó–∞–ø–∏—Å—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', {
        id: record.id,
        hasTitle,
        hasContent,
        title: fields.Title?.substring(0, 50) + '...' || '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞'
      });
      return false;
    }
    
    return true;
  }

  private transformRecord(record: AirtableRecord): AirtableArticle {
    const fields = record.fields;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const slug = this.generateSlug(fields.Title || '');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º excerpt –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const excerpt = this.generateExcerpt(fields.Content || '');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    const defaultImage = 'https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg?auto=compress&cs=tinysrgb&w=800&h=400';
    const imageUrl = fields['Image URL'] && fields['Image URL'].trim() ? fields['Image URL'] : defaultImage;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const category = this.detectCategory(fields.Title || '', fields.Content || '');

    return {
      id: record.id,
      title: fields.Title || '',
      content: fields.Content || '',
      imageUrl,
      author: '–ê–≤—Ç–æ—Ä', // –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à–µ –∏–º—è
      category,
      publishedAt: record.createdTime, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
      excerpt,
      tags: this.extractTags(fields.Title || '', fields.Content || ''),
      slug,
    };
  }

  private generateSlug(title: string): string {
    return title
      .toLowerCase()
      .replace(/[^a-z–∞-—è0-9\s-]/g, '') // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      .replace(/\s+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
      .replace(/-+/g, '-') // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
      .replace(/^-|-$/g, '') // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
      .trim();
  }

  private generateExcerpt(content: string, maxLength: number = 200): string {
    // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ markdown
    const cleanContent = content
      .replace(/<[^>]*>/g, '') // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
      .replace(/[#*`]/g, '') // –£–¥–∞–ª—è–µ–º markdown —Å–∏–º–≤–æ–ª—ã
      .replace(/\n+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
      .trim();
    
    if (cleanContent.length <= maxLength) {
      return cleanContent;
    }
    
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –ª–∏–º–∏—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞—Ç—å —Å–ª–æ–≤–∞
    const truncated = cleanContent.substring(0, maxLength);
    const lastSpaceIndex = truncated.lastIndexOf(' ');
    
    if (lastSpaceIndex > maxLength * 0.8) {
      return truncated.substring(0, lastSpaceIndex).trim() + '...';
    }
    
    return truncated.trim() + '...';
  }

  private detectCategory(title: string, content: string): string {
    const text = (title + ' ' + content).toLowerCase();
    
    // –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if (text.includes('ai') || text.includes('–∏–∏') || text.includes('–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç') || text.includes('chatgpt')) {
      return '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏';
    }
    if (text.includes('–æ–±–∑–æ—Ä') || text.includes('—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ') || text.includes('—Ç–µ—Å—Ç')) {
      return '–û–±–∑–æ—Ä—ã';
    }
    if (text.includes('–æ–±—É—á–µ–Ω–∏–µ') || text.includes('–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ') || text.includes('–∫—É—Ä—Å')) {
      return '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ';
    }
    if (text.includes('—ç—Ç–∏–∫–∞') || text.includes('–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å') || text.includes('–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å')) {
      return '–≠—Ç–∏–∫–∞';
    }
    
    return '–û–±—â–µ–µ';
  }

  private extractTags(title: string, content: string): string[] {
    const text = (title + ' ' + content).toLowerCase();
    const tags: string[] = [];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if (text.includes('chatgpt')) tags.push('ChatGPT');
    if (text.includes('ai') || text.includes('–∏–∏')) tags.push('AI');
    if (text.includes('–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ')) tags.push('–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ');
    if (text.includes('–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏')) tags.push('–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏');
    if (text.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ')) tags.push('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ');
    if (text.includes('–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞')) tags.push('–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞');
    
    return tags.slice(0, 5); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async testConnection(): Promise<boolean> {
    if (!this.isConfigured) {
      return false;
    }

    try {
      const response = await fetch(`${this.baseUrl}?maxRecords=1`, {
        headers: {
          'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
          'Content-Type': 'application/json',
        },
      });

      const success = response.ok;
      console.log(success ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Airtable —É—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Airtable');
      return success;
    } catch (error) {
      console.error('‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Airtable –Ω–µ —É–¥–∞–ª—Å—è:', error);
      return false;
    }
  }

  // Getter to check if service is properly configured
  get configured(): boolean {
    return this.isConfigured;
  }
}

export const airtableService = new AirtableService();