import { articleGenerator, GeneratedArticle } from './articleGenerator';

interface ScheduledArticle {
  id: string;
  article: GeneratedArticle;
  scheduledFor: Date;
  published: boolean;
  createdAt: Date;
}

class BlogSchedulerService {
  private readonly STORAGE_KEY = 'scheduled_articles';
  private readonly LAST_PUBLISH_KEY = 'last_publish_date';
  
  constructor() {
    this.initializeScheduler();
  }

  private initializeScheduler(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é —Å–µ–≥–æ–¥–Ω—è
    this.checkAndPublishDaily();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
    setInterval(() => {
      this.checkAndPublishDaily();
    }, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å
  }

  private async checkAndPublishDaily(): Promise<void> {
    const now = new Date();
    const today = now.toDateString();
    const currentHour = now.getHours();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å 9 —É—Ç—Ä–∞ (–∏–ª–∏ –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏)
    if (currentHour < 9) {
      return;
    }
    
    const lastPublishDate = localStorage.getItem(this.LAST_PUBLISH_KEY);
    
    // –ï—Å–ª–∏ —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (lastPublishDate === today) {
      return;
    }
    
    try {
      console.log('üïò –í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏!');
      await this.publishDailyArticle();
      localStorage.setItem(this.LAST_PUBLISH_KEY, today);
      console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç—å–∏:', error);
    }
  }

  private async publishDailyArticle(): Promise<void> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
      const article = await articleGenerator.generateArticle();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–∏–º–∏—Ç–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–ª–æ–≥)
      this.addArticleToLocalStorage(article);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –Ω–∞ —Å–∞–π—Ç–µ)
      this.notifyNewArticle(article);
      
      console.log('üìù –ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:', article.title);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç—å–∏:', error);
      throw error;
    }
  }

  private addArticleToLocalStorage(article: GeneratedArticle): void {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏
      const existingArticles = this.getStoredArticles();
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      const newArticle: ScheduledArticle = {
        id: this.generateId(),
        article,
        scheduledFor: new Date(),
        published: true,
        createdAt: new Date()
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      existingArticles.unshift(newArticle);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
      const limitedArticles = existingArticles.slice(0, 50);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(limitedArticles));
      
      // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å BlogPage
      this.addToBlogPageFormat(article);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
    }
  }

  private addToBlogPageFormat(article: GeneratedArticle): void {
    try {
      const blogArticlesKey = 'blog_articles';
      const existingBlogArticles = JSON.parse(localStorage.getItem(blogArticlesKey) || '[]');
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π BlogPage
      const blogArticle = {
        id: this.generateId(),
        title: article.title,
        content: article.content,
        imageUrl: article.imageUrl,
        author: article.author,
        category: article.category,
        publishedAt: article.publishedAt,
        excerpt: article.excerpt,
        tags: article.tags,
        slug: this.generateSlug(article.title)
      };
      
      existingBlogArticles.unshift(blogArticle);
      localStorage.setItem(blogArticlesKey, JSON.stringify(existingBlogArticles.slice(0, 50)));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç BlogPage:', error);
    }
  }

  private getStoredArticles(): ScheduledArticle[] {
    try {
      const stored = localStorage.getItem(this.STORAGE_KEY);
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π:', error);
      return [];
    }
  }

  private notifyNewArticle(article: GeneratedArticle): void {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if ('Notification' in window && Notification.permission === 'granted') {
      new Notification('–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –≤ –±–ª–æ–≥–µ!', {
        body: article.title,
        icon: '/favicon.svg'
      });
    }
    
    // –¢–∞–∫–∂–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    window.dispatchEvent(new CustomEvent('newArticlePublished', {
      detail: { article }
    }));
  }

  private generateId(): string {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }

  private generateSlug(title: string): string {
    return title
      .toLowerCase()
      .replace(/[^a-z–∞-—è0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '')
      .trim();
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º

  async scheduleArticle(topic?: string, scheduledFor?: Date): Promise<void> {
    try {
      const article = await articleGenerator.generateArticle(
        topic ? { topic, category: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' } : undefined
      );
      
      const scheduled: ScheduledArticle = {
        id: this.generateId(),
        article,
        scheduledFor: scheduledFor || new Date(),
        published: false,
        createdAt: new Date()
      };
      
      const articles = this.getStoredArticles();
      articles.push(scheduled);
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(articles));
      
      console.log('üìÖ –°—Ç–∞—Ç—å—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞:', article.title);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏:', error);
      throw error;
    }
  }

  getScheduledArticles(): ScheduledArticle[] {
    return this.getStoredArticles();
  }

  async publishNow(): Promise<void> {
    await this.publishDailyArticle();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ BlogPage
  getBlogArticles(): any[] {
    try {
      const blogArticles = localStorage.getItem('blog_articles');
      return blogArticles ? JSON.parse(blogArticles) : [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞:', error);
      return [];
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏
  async generateArticleNow(topic?: string): Promise<GeneratedArticle> {
    const article = await articleGenerator.generateArticle(
      topic ? { topic, category: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' } : undefined
    );
    
    this.addArticleToLocalStorage(article);
    return article;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats(): { total: number; published: number; scheduled: number } {
    const articles = this.getStoredArticles();
    return {
      total: articles.length,
      published: articles.filter(a => a.published).length,
      scheduled: articles.filter(a => !a.published).length
    };
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async requestNotificationPermission(): Promise<void> {
    if ('Notification' in window && Notification.permission === 'default') {
      await Notification.requestPermission();
    }
  }
}

export const blogScheduler = new BlogSchedulerService();