{
  "info": {
    "name": "Tuya Token Generator",
    "_postman_id": "tuya-token-generator",
    "description": "Простой способ получить токены API Tuya",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "client_id",
      "value": "Введите ваш client_id сюда",
      "type": "string"
    },
    {
      "key": "client_secret",
      "value": "Введите ваш client_secret сюда",
      "type": "string"
    },
    {
      "key": "region_url",
      "value": "https://openapi.tuyaeu.com",
      "type": "string",
      "description": "Измените на URL вашего региона, если нужно"
    }
  ],
  "item": [
    {
      "name": "Get Token",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "client_id",
            "value": "{{client_id}}",
            "type": "text"
          },
          {
            "key": "sign",
            "value": "{{sign}}",
            "type": "text"
          },
          {
            "key": "t",
            "value": "{{timestamp}}",
            "type": "text"
          },
          {
            "key": "sign_method",
            "value": "HMAC-SHA256",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{region_url}}/v1.0/token?grant_type=1",
          "host": ["{{region_url}}"],
          "path": ["v1.0", "token"],
          "query": [
            {
              "key": "grant_type",
              "value": "1"
            }
          ]
        },
        "description": "Получение токенов доступа к API Tuya"
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Получение текущего timestamp",
              "var timestamp = Date.now().toString();",
              "pm.variables.set('timestamp', timestamp);",
              "",
              "// Получение параметров для подписи",
              "var clientId = pm.variables.get('client_id');",
              "var secret = pm.variables.get('client_secret');",
              "var path = '/v1.0/token?grant_type=1';",
              "",
              "// Формирование строки для подписи",
              "var stringToSign = clientId + timestamp + 'GET\\n\\n\\n' + path;",
              "",
              "// Вычисление HMAC-SHA256 подписи",
              "var sign = CryptoJS.HmacSHA256(stringToSign, secret).toString(CryptoJS.enc.Hex).toUpperCase();",
              "pm.variables.set('sign', sign);",
              "",
              "// Логируем для отладки",
              "console.log('Client ID:', clientId);",
              "console.log('Timestamp:', timestamp);",
              "console.log('String to sign:', stringToSign);",
              "console.log('Signature:', sign);"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Refresh Token",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "client_id",
            "value": "{{client_id}}",
            "type": "text"
          },
          {
            "key": "sign",
            "value": "{{refresh_sign}}",
            "type": "text"
          },
          {
            "key": "t",
            "value": "{{refresh_timestamp}}",
            "type": "text"
          },
          {
            "key": "sign_method",
            "value": "HMAC-SHA256",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{region_url}}/v1.0/token/{{refresh_token}}",
          "host": ["{{region_url}}"],
          "path": ["v1.0", "token", "{{refresh_token}}"]
        },
        "description": "Обновление истекающего токена с помощью refresh_token"
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Получение текущего timestamp",
              "var timestamp = Date.now().toString();",
              "pm.variables.set('refresh_timestamp', timestamp);",
              "",
              "// Получение параметров для подписи",
              "var clientId = pm.variables.get('client_id');",
              "var secret = pm.variables.get('client_secret');",
              "var refreshToken = pm.variables.get('refresh_token');",
              "var path = '/v1.0/token/' + refreshToken;",
              "",
              "// Проверка наличия refresh_token",
              "if (!refreshToken) {",
              "    console.error('❌ ОШИБКА: refresh_token не найден! Сначала получите токен с помощью запроса \"Get Token\"');",
              "    return;",
              "}",
              "",
              "// Формирование строки для подписи",
              "var stringToSign = clientId + timestamp + 'GET\\n\\n\\n' + path;",
              "",
              "// Вычисление HMAC-SHA256 подписи",
              "var sign = CryptoJS.HmacSHA256(stringToSign, secret).toString(CryptoJS.enc.Hex).toUpperCase();",
              "pm.variables.set('refresh_sign', sign);",
              "",
              "// Логируем для отладки",
              "console.log('Using refresh_token:', refreshToken);",
              "console.log('Timestamp:', timestamp);",
              "console.log('String to sign:', stringToSign);",
              "console.log('Signature:', sign);"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Автоматическое сохранение токенов из ответа",
          "var jsonData = pm.response.json();",
          "",
          "if (jsonData && jsonData.success && jsonData.result) {",
          "    // Сохраняем access_token",
          "    if (jsonData.result.access_token) {",
          "        pm.collectionVariables.set('access_token', jsonData.result.access_token);",
          "        console.log('✅ Сохранен access_token:', jsonData.result.access_token.substring(0, 10) + '...');",
          "    }",
          "    ",
          "    // Сохраняем refresh_token",
          "    if (jsonData.result.refresh_token) {",
          "        pm.collectionVariables.set('refresh_token', jsonData.result.refresh_token);",
          "        console.log('✅ Сохранен refresh_token:', jsonData.result.refresh_token.substring(0, 10) + '...');",
          "    }",
          "    ",
          "    // Вывод информации о сроке действия",
          "    if (jsonData.result.expire_time) {",
          "        const expireTime = jsonData.result.expire_time;",
          "        const expireDate = new Date();",
          "        expireDate.setSeconds(expireDate.getSeconds() + expireTime);",
          "        console.log(`✅ Токен действителен ${expireTime} секунд (до ${expireDate.toLocaleString()})`);",
          "    }",
          "} else if (jsonData && !jsonData.success) {",
          "    console.error('❌ Ошибка получения токена:', jsonData.msg);",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ]
}